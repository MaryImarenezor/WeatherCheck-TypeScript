{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyfountain/Documents/ThriveDX/MSP2/WeatherCheck/weather-check-app/src/Components/Aside.js\",\n  _s = $RefreshSig$();\n//Aside Component - used for suggesting things to wear based on the location\n\n//DEPENCENCIES\nimport '../styles.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Aside() {\n  _s();\n  /* PSUEDOCODE:\n   TRYING TO USE THE DATA BEING PULLED IN AND BASED ON THE DATA, THERE'S A DIFFERENT MESSAGE BASED ON THE WEATHER AND THE DESCRIPTION\n       dependencies - import WeatherCard and WeatherApp so I can use the values in the WeatherCard & WeatherApp for my algorithm\n  \n      useState - to set the initial value of the aside. say something like, \"type zipcode to get suggestions for attire\"\n       setMessage - to grab the information on what to say when the zip code is displayed\n       ex) const setMessage = async () => {\n          use if/else statements to choose which message to display. use emojis!\n              an if/else statement for weather[0].description\n              an if/else statement for main.temp\n              an if/else statement for main.humidity\n          nest all of the if/else statements in a trycatch, so if it doesn't work, it sends an error message\n        useEffect - use useEffect to run the setMessage function\n      ex)\n      useEffect(() => {\n       \n      , []}) <--- This is where I put the zipcode to indicate that it wont run unless the zipcode has a value\n       const display - to display the message\n       return - returning the const display\n  \n  */\n\n  let [message, setMessage] = useState(\"Type in ZipCode to get suggestions for attire!\");\n  let [description, setDescription] = useState(\"\");\n  const getWeatherDetails = ({\n    WeatherData\n  }) => {\n    let weatherMessage = \"\";\n    let weatherDescription = \"\";\n    try {\n      if (WeatherData.main.temp > 100) {\n        weatherMessage = \"It's hot.... like really hot... leathers not recommended at all...\";\n      } else if (WeatherData.main.temp < 70) {\n        weatherMessage = \"it's warm today! No need for bundling up\";\n      } else if (WeatherData.main.temp < 45) {\n        weatherMessage = \"It's not that cold outside today, but a small sweater will do\";\n      } else if (WeatherData.main.temp < 20) {\n        weatherMessage = \"Brrr, chilly! try putting on a Jacket!\";\n      } else {\n        weatherMessage = \"\";\n      }\n      if (WeatherData.weather[0].description === \"clear sky\") {\n        weatherDescription = \"You might want to get some sunglasses\";\n      } else if (WeatherData.weather[0].description === \"shower rain\") {\n        weatherDescription = \"Make sure you have an umbrella\";\n      } else if (WeatherData.weather[0].description === \"rain\" && WeatherData.weather[0].description === \"thunderstorm\") {\n        weatherDescription = \"Grab an umbrella! It's pouring!\";\n      } else if (WeatherData.weather[0].description === \"snow\") {\n        weatherDescription = \"get your snowboots 'cause its snowin outside.\";\n      } else {\n        weatherDescription = \"\";\n      }\n      setMessage(weatherMessage);\n      setDescription(weatherDescription);\n    } catch (error) {\n      weatherMessage = \"No zipcode, no attire suggestions. sorry...\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"asideContainer\",\n    children: [message, description]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 17\n  }, this);\n}\n_s(Aside, \"L6Jy0kv8dNDrJpufhJdgoPJpkSE=\");\n_c = Aside;\nexport default Aside;\nvar _c;\n$RefreshReg$(_c, \"Aside\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Aside","_s","message","setMessage","description","setDescription","getWeatherDetails","WeatherData","weatherMessage","weatherDescription","main","temp","weather","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zacharyfountain/Documents/ThriveDX/MSP2/WeatherCheck/weather-check-app/src/Components/Aside.js"],"sourcesContent":["//Aside Component - used for suggesting things to wear based on the location\n\n//DEPENCENCIES\nimport '../styles.css'\nimport React, { useState } from 'react'\n\n\nfunction Aside() {\n    /* PSUEDOCODE:\n\n    TRYING TO USE THE DATA BEING PULLED IN AND BASED ON THE DATA, THERE'S A DIFFERENT MESSAGE BASED ON THE WEATHER AND THE DESCRIPTION\n\n        dependencies - import WeatherCard and WeatherApp so I can use the values in the WeatherCard & WeatherApp for my algorithm\n    \n        useState - to set the initial value of the aside. say something like, \"type zipcode to get suggestions for attire\"\n\n        setMessage - to grab the information on what to say when the zip code is displayed\n\n        ex) const setMessage = async () => {\n            use if/else statements to choose which message to display. use emojis!\n                an if/else statement for weather[0].description\n                an if/else statement for main.temp\n                an if/else statement for main.humidity\n            nest all of the if/else statements in a trycatch, so if it doesn't work, it sends an error message\n\n\n        useEffect - use useEffect to run the setMessage function\n        ex)\n        useEffect(() => {\n\n        \n        , []}) <--- This is where I put the zipcode to indicate that it wont run unless the zipcode has a value\n\n        const display - to display the message\n\n        return - returning the const display\n    \n    */\n\n\n        \n            let [message, setMessage] = useState(\"Type in ZipCode to get suggestions for attire!\")\n            let [description, setDescription] = useState(\"\");\n        \n            const getWeatherDetails = ({ WeatherData }) => {\n            let  weatherMessage = \"\";\n            let weatherDescription = \"\";\n                try {\n                    if (WeatherData.main.temp > 100) {\n                        weatherMessage = \"It's hot.... like really hot... leathers not recommended at all...\"\n                    } else if(WeatherData.main.temp < 70) {\n                        weatherMessage = \"it's warm today! No need for bundling up\"\n                    } else if(WeatherData.main.temp < 45) {\n                        weatherMessage = \"It's not that cold outside today, but a small sweater will do\"\n                    } else if(WeatherData.main.temp < 20) {\n                        weatherMessage = \"Brrr, chilly! try putting on a Jacket!\"\n                    } else {\n                        weatherMessage = \"\"\n                    }\n        \n                    if (WeatherData.weather[0].description === \"clear sky\") {\n                        weatherDescription = \"You might want to get some sunglasses\"\n                    } else if (WeatherData.weather[0].description === \"shower rain\") {\n                        weatherDescription = \"Make sure you have an umbrella\"\n                    } else if (WeatherData.weather[0].description === \"rain\" && WeatherData.weather[0].description === \"thunderstorm\") {\n                        weatherDescription = \"Grab an umbrella! It's pouring!\"\n                    } else if (WeatherData.weather[0].description === \"snow\") {\n                        weatherDescription = \"get your snowboots 'cause its snowin outside.\"\n                    } else {\n                        weatherDescription =\"\"\n                    }\n                    setMessage(weatherMessage);\n                    setDescription(weatherDescription);\n        \n                } catch (error) {\n                    weatherMessage = \"No zipcode, no attire suggestions. sorry...\"\n                }\n            };\n        \n            \n        \n        \n        \n            return (\n                <div className='asideContainer'>\n                    {message}\n                    {description}\n                </div>\n            )\n        }\n        \n        \n        \n        \n        export default Aside"],"mappings":";;AAAA;;AAEA;AACA,OAAO,eAAe;AACtB,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGvC,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAaY,IAAI,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,gDAAgD,CAAC;EACtF,IAAI,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMS,iBAAiB,GAAGA,CAAC;IAAEC;EAAY,CAAC,KAAK;IAC/C,IAAKC,cAAc,GAAG,EAAE;IACxB,IAAIC,kBAAkB,GAAG,EAAE;IACvB,IAAI;MACA,IAAIF,WAAW,CAACG,IAAI,CAACC,IAAI,GAAG,GAAG,EAAE;QAC7BH,cAAc,GAAG,oEAAoE;MACzF,CAAC,MAAM,IAAGD,WAAW,CAACG,IAAI,CAACC,IAAI,GAAG,EAAE,EAAE;QAClCH,cAAc,GAAG,0CAA0C;MAC/D,CAAC,MAAM,IAAGD,WAAW,CAACG,IAAI,CAACC,IAAI,GAAG,EAAE,EAAE;QAClCH,cAAc,GAAG,+DAA+D;MACpF,CAAC,MAAM,IAAGD,WAAW,CAACG,IAAI,CAACC,IAAI,GAAG,EAAE,EAAE;QAClCH,cAAc,GAAG,wCAAwC;MAC7D,CAAC,MAAM;QACHA,cAAc,GAAG,EAAE;MACvB;MAEA,IAAID,WAAW,CAACK,OAAO,CAAC,CAAC,CAAC,CAACR,WAAW,KAAK,WAAW,EAAE;QACpDK,kBAAkB,GAAG,uCAAuC;MAChE,CAAC,MAAM,IAAIF,WAAW,CAACK,OAAO,CAAC,CAAC,CAAC,CAACR,WAAW,KAAK,aAAa,EAAE;QAC7DK,kBAAkB,GAAG,gCAAgC;MACzD,CAAC,MAAM,IAAIF,WAAW,CAACK,OAAO,CAAC,CAAC,CAAC,CAACR,WAAW,KAAK,MAAM,IAAIG,WAAW,CAACK,OAAO,CAAC,CAAC,CAAC,CAACR,WAAW,KAAK,cAAc,EAAE;QAC/GK,kBAAkB,GAAG,iCAAiC;MAC1D,CAAC,MAAM,IAAIF,WAAW,CAACK,OAAO,CAAC,CAAC,CAAC,CAACR,WAAW,KAAK,MAAM,EAAE;QACtDK,kBAAkB,GAAG,+CAA+C;MACxE,CAAC,MAAM;QACHA,kBAAkB,GAAE,EAAE;MAC1B;MACAN,UAAU,CAACK,cAAc,CAAC;MAC1BH,cAAc,CAACI,kBAAkB,CAAC;IAEtC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZL,cAAc,GAAG,6CAA6C;IAClE;EACJ,CAAC;EAMD,oBACIT,OAAA;IAAKe,SAAS,EAAC,gBAAgB;IAAAC,QAAA,GAC1Bb,OAAO,EACPE,WAAW;EAAA;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEd;AAAClB,EAAA,CAlFAD,KAAK;AAAAoB,EAAA,GAALpB,KAAK;AAuFN,eAAeA,KAAK;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}